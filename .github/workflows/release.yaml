name: Release

on:
  push:
    branches:
      - users/jesse/release
env:
  ContainerRegistry: "ghcr.io"
  ContainerRegistryRepo: "ghcr.io/azure"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y make gcc

      - name: Install Kubebuilder
        run: |
          version=2.3.1 # replace with your desired version
          arch=amd64
          curl -L https://go.kubebuilder.io/dl/${version}/$(go env GOOS)/${arch} | tar -xz -C /tmp/
          sudo mv /tmp/kubebuilder_${version}_$(go env GOOS)_${arch} /usr/local/kubebuilder
          echo "PATH=$PATH:/usr/local/kubebuilder/bin" >> $GITHUB_ENV

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ContainerRegistry }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Helm Registry
        run: helm registry login ${{ env.ContainerRegistry }} -u ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19  # Replace with your desired Go version

      - name: Increment Version
        id: increment_version
        run: |
          version=$(cat ./version/versions.txt)
          version=$((version+1))
          echo $version > VERSION
          echo "::set-output name=version::v$version"


      - name: Build Symphony Api
        run: |
          docker build -t symphonyapi . -f api/Dockerfile
      
      - name: Build Symphony k8s
        run: | 
          cd k8s
          make generate
          make build
          make docker-build IMG=symphonyk8s
          cd ..

      - name: Replace version in cli/cmd/up.go
        run: sed -i "s/{VERSION}/${{ steps.increment_version.outputs.version }}/g" cli/cmd/up.go

      - name: Build maestro
        run: |
          cd cli
          mage generatePackages ~/maestro
          cd ..

      - name: Replace version in packages/helm/values.yaml
        run: |
          sed -i "s/{VERSION}/${{ steps.increment_version.outputs.version }}/g" packages/helm/values.yaml
          sed -i "s/{VERSION}/${{ steps.increment_version.outputs.version }}/g" packages/helm/Chart.yaml

      - name: Build Helm
        run: |
          cd k8s
          mage helmTemplate
          cd ../packages/helm
          helm package symphony
      
      - name: Push symphony api images
        run: |
          docker tag symphonyapi ${{ env.ContainerRegistryRepo }}/symphony/symphony-api:${{ steps.increment_version.outputs.version }}
          docker push ${{ env.ContainerRegistryRepo }}/symphony/symphony-api:${{ steps.increment_version.outputs.version }}

      - name: Push symphony k8s images
        run: |
          docker tag symphonyk8s ${{ env.ContainerRegistryRepo }}/symphony/symphony-k8s:${{ steps.increment_version.outputs.version }}
          docker push ${{ env.ContainerRegistryRepo }}/symphony/symphony-k8s:${{ steps.increment_version.outputs.version }}

      - name: Push symphony helm package
        run: |
          helm push symphony-${{ steps.increment_version.outputs.version }}.tgz oci://${{ env.ContainerRegistryRepo }}/symphony/helm
      - name: Upload mastro packages
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: mastro-packages
          path: |
            ~/maestro/maestro_darwin_amd64.tar.gz
            ~/maestro/maestro_linux_amd64.tar.gz
            ~/maestro/maestro_windows_amd64.zip